// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Instruction representation
    //
    //  15   14   13   12   11   10    9    8    7    6    5    4    3    2    1    0
    // --------------------------------------------------------------------------------
    // | i | ## | ## |  a | zx | nx | zy | ny |  f | no |  A |  D |  M | <0 | =0 | >0 |
    // --------------------------------------------------------------------------------
    //                \------------ compare -----------/ \--- dest ---/ \---- jmp ---/
    //  where:
    //    * i: 0 for A instruction, 1 for C instruction
    //    * a: 0 for A register, 1 for M input as the second input to the ALU

    Register(in=nextPC, load=true, out=regPC, out[0..14]=pc);
    Register(in=regAIn, load=saveA, out=regA, out[0..14]=addressM);
    Register(in=aluOut, load=saveD, out=regD);

    Mux16(a=aluOut, b=instruction, sel=aInst, out=regAIn);
    // instruction[12] is the `a` bit
    Mux16(a=regA, b=inM, sel=instruction[12], out=regAOrM);

    ALU(x=regD, y=regAOrM,
        zx=instruction[11], // c5
        nx=instruction[10], // c4
        zy=instruction[9],  // c3
        ny=instruction[8],  // c2
        f=instruction[7],   // c1
        no=instruction[6],  // c0
        out=outM, out=aluOut, zr=zr, ng=ng);

    Not(in=instruction[15], out=aInst);
    // write destination only if it's a C instruction
    And(a=instruction[15], b=instruction[3], out=writeM);
    And(a=instruction[15], b=instruction[4], out=saveD);
    // write A address if it's not an A instruction or the A destination is set
    Or(a=aInst, b=instruction[5], out=saveA);

    // next PC
    Mux(sel=ng, a=instruction[0], b=instruction[2], out=notZero);
    Mux(sel=zr, a=notZero, b=instruction[1], out=shouldJmp);
    Inc16(in=regPC, out=pcPlusOne);
    Mux8Way16(sel[2]=reset, sel[1]=aInst, sel[0]=shouldJmp,
            a=pcPlusOne, b=regA, c=pcPlusOne, d=pcPlusOne,
            e=false, f=false, g=false, h=false,
            out=nextPC);
}
